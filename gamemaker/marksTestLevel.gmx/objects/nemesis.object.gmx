<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>nemesisFront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self_direction = 0

visionRad = 0 //determines the swag of the enemies view
visionWidth = 60 //determines the width of the vision cone
startingVision = 275 // determines the distance and enemy can see
vision = startingVision

visionRot = 0 //determines the starting rotation
forward = true

baseMovementSpeed = 4
movementSpeed = baseMovementSpeed

mode = 0 //mode 0 is standing still, mode 1 is following a path
state = "normal" //"normal" "search" "chase"
self.currentPath = 0

talking = false //is the enmey talking

image_speed = 0

posX = 0
posY = 0

drawnDirection = direction

oldVision = vision

self.smokeEffects = 0;

self.conesStates = ds_list_create() //used for keeping the vision cones sxxxy

self.debugOn = true;

self.numDartHits = 0;

self.seekFlynn = false;

self.pathStartPosition = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Returning To The Normal State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "normal"
self.activePath = self.currentPath
path_end()
self.debugEnemy = true
self.pathStartPosition = 0//random(1);
path_position = pathStartPosition;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.depth = -(y + self.sprite_height/2)
moving = 0

self.inSmoke = false;
if (collision_circle(x, y, global.itemEffectRadius[global.SMOKEBOMBID], smokeBomb, false, false)) {
    self.inSmoke = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visionCode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visionRad &gt; 0) {
    if (forward == true) {
        visionRot = (visionRot+1) 
        if (visionRot &gt;= visionRad) {
            forward = false
        }
    } else {
        visionRot = (visionRot-1) 
        if (visionRot &lt;= 0) {
            forward = true
        }
    }
}

var sleepDartObj = instance_nearest(self.x, self.y, sleepDart);
if (sleepDartObj &amp;&amp; objWithinVision(sleepDartObj.x, sleepDartObj.y)) {
    self.state = "investigate";
    self.investigateTargetX = sleepDartObj.startX;
    self.investigateTargetY = sleepDartObj.startY;
}

self.vision = self.startingVision;
if (self.inSmoke) {
    self.vision /= 2;
}

if (state == "normal" || state == "smoke" || state == "investigate") {
    rot = degtorad(direction + 90 - visionRad/2 + visionRot)
    posX = (self.x) + sin(rot) * vision
    posY = (self.y) + cos(rot) * vision
    object = collision_line(self.x,self.y,posX,posY ,parentWallObj,false,true)
    if (object){
        dist = distance_to_object(object)
        posX = (self.x) + sin(rot) * dist
        posY = (self.y) + cos(rot) * dist
    } else {
        dist = vision
    }

    lineDirection = point_direction(self.x,self.y,fynn.x,fynn.y)
    if (objWithinVision(fynn.x, fynn.y) &amp;&amp;
        distance_to_object(fynn) &lt;= vision) {
    
        if (!collision_line(self.x,self.y,fynn.x,fynn.y ,parentWallObj,false,true)) {
            state = "chase" 
            posX = fynn.x
            posY = fynn.y
            alarm[0] = -1
        }
    }
} else if (state == "chase" || state = "search"){
    var withinVision = (objWithinVision(fynn.x, fynn.y) &amp;&amp;
                        distance_to_object(fynn) &lt;= vision &amp;&amp;
                        !collision_line(self.x,self.y,fynn.x,fynn.y ,parentWallObj,false,true));
                                          
    if (withinVision){
        state = "chase" 
        posX = fynn.x
        posY = fynn.y
        alarm[0] = -1
    } else {
        state = "search"
        if (alarm[0] == -1){
            alarm[0] = room_speed * 5
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementCode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != "chase" &amp;&amp; self.inSmoke) {
    var smokeBombObj = instance_nearest(x, y, smokeBomb);
    enemySmoke(smokeBombObj.alarm[0] / room_speed);
}

if (state == "normal" || state == "chase" || state == "search" || state == "investigate") {
    self.movementSpeed = baseMovementSpeed;
    if (self.inSmoke) {
        self.movementSpeed *= 0.5;
    }
    
    path_speed = movementSpeed;
    
    if (state == "normal") {
        if (mode == 0) {
        
        } else if (mode == 1) {
            if (self.activePath != self.currentPath || (self.activePath == self.currentPath &amp;&amp; path_position &lt;= 0)) {
            //if (self.activePath != self.currentPath) {
                if (point_distance(self.x, self.y, 
                        path_get_x(currentPath, self.pathStartPosition),
                        path_get_y(currentPath, self.pathStartPosition)) &lt;= self.movementSpeed) {
                    self.activePath = self.currentPath
                    moving = self.movementSpeed
                    path_start(self.currentPath, movementSpeed, 1, 1)
                } else {
                    retX = path_get_x(self.currentPath, pathStartPosition)
                    retY = path_get_y(self.currentPath, pathStartPosition)
                    moving = self.movementSpeed
                    mp_potential_step(retX,retY,movementSpeed,false);
                    /*
                    path_end()
                    self.activePath = path_add()
                    mp_potential_path(self.activePath, retX, retY, 1, 10, 0)
                    path_start(self.activePath, 1, 0, 0)
                    */
                }  
            } else {
                moving = movementSpeed
            }
        } 
    } else if (state == "chase" || state == "search") {
        if (mode == 1) {
            if (self.activePath == self.currentPath) {
                path_end()
                path_position = 0
            }
        }
        
        if (posX &gt; self.x-5 &amp;&amp; posX &lt; self.x+5 &amp;&amp; posY &gt; self.y-5 &amp;&amp; posY &lt; self.y+5){
            direction += 5
        } else {
            moving = self.movementSpeed
            mp_potential_step(posX, posY, self.movementSpeed, 0)
            self.activePath = path_add()
        }  
    } else if (state == "investigate") {
        var targetX = self.investigateTargetX
        var targetY = self.investigateTargetY - 24
    
        var distToTarget = point_distance(targetX, targetY, x, y)
        if (distToTarget &lt;= 15) {
            image_index = 0
            alarm[0] = 1;
        } else {
            path_end()
            moving = movementSpeed
            mp_potential_step(targetX, targetY, movementSpeed, 0)
        }
    }
    
    dir = direction - 45
    if (dir &gt;0 &amp;&amp; dir &lt;= 90) sprite_index = nemesisBack
    else if (dir &gt;0 &amp;&amp; dir &lt;= 180) sprite_index = nemesisLeft
    else if (dir &gt;0 &amp;&amp; dir &lt;= 270) sprite_index = nemesisFront
    else sprite_index = nemesisRight

    if (moving &gt; 0) self.image_index = self.image_index+(moving*.1);
} else if (state == "smoke") {
    direction += 5;
    dir = direction - 45
    if (dir &gt;0 &amp;&amp; dir &lt;= 90) sprite_index = nemesisBack
    else if (dir &gt;0 &amp;&amp; dir &lt;= 180) sprite_index = nemesisLeft
    else if (dir &gt;0 &amp;&amp; dir &lt;= 270) sprite_index = nemesisFront
    else sprite_index = nemesisRight

    if (moving &gt; 0) self.image_index = self.image_index+(moving*.1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(64)
draw_set_alpha(0.5)
draw_ellipse_color(self.x-12,self.y+sprite_height/2-16,self.x+12,self.y+sprite_height/2-4,c_black,c_black,false)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lineColor = c_green
if (state = "search"){
    lineColor = c_yellow
} else if (state = "chase") {
    lineColor = c_red
}

//used to smooth out the drawing of the line
if (drawnDirection &gt; direction){
    if ((drawnDirection-direction) &lt; (360-drawnDirection+direction)){
        drawnDirection -= min(5,drawnDirection-direction)
    } else {
        drawnDirection += min(5,(360-drawnDirection+direction))
    }
} else if (direction &gt; drawnDirection){
    if ((direction-drawnDirection) &lt; (360+drawnDirection-direction)){
        drawnDirection += min(5,direction-drawnDirection)
    } else {
        drawnDirection -= min(5,(360+drawnDirection-direction))
    }
}

drawnDirection = drawnDirection mod 360

draw_set_color(lineColor);
draw_set_alpha(0.5)
var curve = visionWidth/3
draw_primitive_begin(pr_trianglefan)
var rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot - visionWidth/2)
draw_vertex(self.x + sin(rot)*18, self.y + cos(rot)*18);

var newConeStates = ds_list_create()

for (i=0; i &lt;= curve; i++) {
    rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot - visionWidth/2 + i*visionWidth/curve)
    drawX = (self.x) + sin(rot) * vision
    drawY = (self.y) + cos(rot) * vision
    var object = nearest_collision_line(self.x,self.y,drawX,drawY ,parentWallObj)
    if (object){
        dist = distance_to_object(object)
        
    } else {
        dist = vision
    }
    
    oldDist = ds_list_find_value(conesStates,i);
   
    if ( abs(oldDist - dist) &gt; 10) {
        if (oldDist - dist &gt; 0) dist = oldDist - 10
        else dist = oldDist + 10
    }
    ds_list_add(newConeStates,dist);
    
    drawX = (self.x) + sin(rot) * dist
    drawY = (self.y) + cos(rot) * dist

    draw_vertex(drawX,drawY) 
}
conesStates = newConeStates;

draw_vertex(self.x + sin(rot)*18,self.y + cos(rot)*18) 
draw_primitive_end()
draw_set_alpha(1)
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
