<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bgRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self_direction = 0

visionRad = 0 //determines the swag of the enemies view
visionWidth = 60 //determines the width of the vision cone
startingVision = 200 // determines the distance and enemy can see
vision = startingVision

visionRot = 0 //determines the starting rotation
forward = true

baseMovementSpeed = 1
movementSpeed = baseMovementSpeed

mode = 0 //mode 0 is standing still, mode 1 is following a path
state = "normal" //"normal" "search" "chase"
self.currentPath = 0 

talking = false //is the enmey talking

image_speed = 0

posX = 0
posY = 0

drawnDirection = direction

oldVision = vision

self.smokeEffects = 0;

self.conesStates = ds_list_create() //used for keeping the vision cones sxxxy


alarm[2] = random(50) //used for uncommon events


imageTop = bgBack
imageLeft = bgLeft
imageRight = bgRight
imageFront = bgFront
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[2] = 30

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Returning To The Normal State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "normal"
self.activePath = self.currentPath
path_end()
path_position = 0
self.debugEnemy = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(64)
draw_set_alpha(0.5)
draw_ellipse_color(self.x-12,self.y+sprite_height/2-16,self.x+12,self.y+sprite_height/2-4,c_black,c_black,false)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (state != "sleep") {
    lineColor = c_green
    if (state == "search" || state == "smoke"){
        lineColor = c_yellow
    } else if (state == "chase") {
        lineColor = c_red
    }
    //used to smooth out the drawing of the line
    if (drawnDirection &gt; direction){
        if ((drawnDirection-direction) &lt; (360-drawnDirection+direction)){
            drawnDirection -= min(5,drawnDirection-direction)
        } else {
            drawnDirection += min(5,(360-drawnDirection+direction))
        }
    } else if (direction &gt; drawnDirection){
        if ((direction-drawnDirection) &lt; (360+drawnDirection-direction)){
            drawnDirection += min(5,direction-drawnDirection)
        } else {
            drawnDirection -= min(5,(360+drawnDirection-direction))
        }
    }
    
    drawnDirection = drawnDirection mod 360
    
    
    draw_set_color(lineColor);
    draw_set_alpha(0.5)
    curve = visionWidth/3
    draw_primitive_begin(pr_trianglefan)
    rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot - visionWidth/2)
    draw_vertex(self.x + sin(rot)*18, self.y + cos(rot)*18);
    
    var newConeStates = ds_list_create()
    
    for (i=0; i &lt;= curve; i++) {
        rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot - visionWidth/2 + i*visionWidth/curve)
        drawX = (self.x) + sin(rot) * vision
        drawY = (self.y) + cos(rot) * vision
        object = nearest_collision_line(self.x,self.y,drawX,drawY ,parentWallObj)
        if (object){
            dist = distance_to_object(object)
            
        } else {
            dist = vision
        }
        
        oldDist = ds_list_find_value(conesStates,i);
       
        if ( abs(oldDist - dist) &gt; 10) {
            if (oldDist - dist &gt; 0) dist = oldDist - 10
            else dist = oldDist + 10
        }
        ds_list_add(newConeStates,dist);
        
        drawX = (self.x) + sin(rot) * dist
        drawY = (self.y) + cos(rot) * dist

        draw_vertex(drawX,drawY) 
    }
    conesStates = newConeStates;
    
    draw_vertex(self.x + sin(rot)*18,self.y + cos(rot)*18) 
    draw_primitive_end()
    draw_set_alpha(1)
    draw_set_color(c_black);

}
/*
rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot)
drawX = (self.x) + sin(rot) * vision
drawY = (self.y) + cos(rot) * vision
object = collision_line(self.x,self.y,drawX,drawY ,parentWallObj,false,true)
if (object){
    dist = distance_to_object(object)
    drawX = (self.x) + sin(rot) * dist
    drawY = (self.y) + cos(rot) * dist
} else {
    dist = vision
}

if (oldVision &lt; dist){
    changedDistance = oldVision + min(dist - oldVision, 5)
} else {
    changedDistance = oldVision - min(oldVision - dist, 5)
}

oldVision = changedDistance

rot1 = degtorad(drawnDirection + 90 - visionRad/2 + visionRot - 10)
drawX1 = (self.x) + sin(rot1) * changedDistance
drawY1 = (self.y) + cos(rot1) * changedDistance
rot2 = degtorad(drawnDirection + 90 - visionRad/2 + visionRot + 10)
drawX2 = (self.x) + sin(rot2) * changedDistance
drawY2 = (self.y) + cos(rot2) * changedDistance


//draw_set_alpha(0.5)

//draw_triangle_color(
//self.x + sin(rot)*18
//,self.y + cos(rot)*18
//,drawX1,drawY1,drawX2,drawY2,lineColor,lineColor,lineColor,false);

//draw_set_alpha(1)


rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot)
drawX = (self.x) + sin(rot) * vision
drawY = (self.y) + cos(rot) * vision

draw_line_width_color(
 self.x + sin(rot)*18
,self.y + cos(rot)*18
,drawX
,drawY
,3
,lineColor,lineColor);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
