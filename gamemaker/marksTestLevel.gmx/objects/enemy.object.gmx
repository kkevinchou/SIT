<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bodygaurdFront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self_direction = 0

visionRad = 30
vision = 200

visionRot = 0
forward = true

mode = 0
state = "normal" //"normal" "search" "chase"
self.currentPath = 0

image_speed = 0

posX = 0
posY = 0

drawnDirection = direction

self.debugEnemy = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "normal"
self.activePath = self.currentPath
path_end()
path_position = 0
self.debugEnemy = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.depth = -(y + self.sprite_height/2)
moving = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visionCode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// show_debug_message("ENEMY - VISION")

if (visionRad &gt; 0) {
    if (forward == true) {
        visionRot = (visionRot+1) 
        if (visionRot &gt;= visionRad) {
            forward = false
        }
    } else {
        visionRot = (visionRot-1) 
        if (visionRot &lt;= 0) {
            forward = true
        }
    }
}
if (state == "normal") {

    rot = degtorad(direction + 90 - visionRad/2 + visionRot)
    posX = (self.x) + sin(rot) * vision
    posY = (self.y) + cos(rot) * vision
    object = collision_line(self.x,self.y,posX,posY ,parentWallObj,false,true)
    if (object){
        dist = distance_to_object(object)
        posX = (self.x) + sin(rot) * dist
        posY = (self.y) + cos(rot) * dist
    }
    
    char = collision_line(self.x,self.y,posX,posY,fynn,true,true)
    if (char) {
        if (!collision_line(self.x,self.y,char.x,char.y ,parentWallObj,false,true)) {
            state = "chase" 
        }
    }
    
} else if (state == "chase" || state = "search"){

    if (!collision_line(self.x,self.y,fynn.x,fynn.y ,parentWallObj,false,true)) {
        lineDirection = point_direction(self.x,self.y,fynn.x,fynn.y)
        if ((direction+visionRad/2 &gt;= lineDirection) &amp;&amp; 
            (direction-visionRad/2 &lt;= lineDirection) ){
            state = "chase" 
            posX = fynn.x
            posY = fynn.y
            alarm[0] = -1
        }
        
    } else {
        state = "search"
        if (alarm[0] == -1){
            alarm[0] = 200
        }
    }
    
}







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementCode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// show_debug_message("ENEMY - STEP")

if (state == "normal") {
    if (mode == 0) {
    
    } else if (mode == 1) {
        if (self.activePath != self.currentPath || (self.activePath == self.currentPath &amp;&amp; path_position &lt;= 0)) {
            if (self.x == path_get_x(currentPath,0) &amp;&amp; self.y == path_get_y(self.currentPath,0)){
                self.activePath = self.currentPath
                path_start(self.currentPath,1,1,1)
            } else {
                retX = path_get_x(self.currentPath,0)
                retY = path_get_y(self.currentPath,0)
                mp_potential_step(retX,retY,1,false);
                moving = 1
                /*
                path_end()
                self.activePath = path_add()
                mp_potential_path(self.activePath, retX, retY, 1, 10, 0)
                path_start(self.activePath, 1, 0, 0)
                */
            }  
        } else {
            moving = 1
        }
        
    }
} else if (state == "chase" || state == "search") {
    if (mode == 1) {
        if (self.activePath == self.currentPath) {
            path_end()
            path_position = 0
        }
    }
    
    if (posX &gt; self.x-5 &amp;&amp; posX &lt; self.x+5 &amp;&amp; posY &gt; self.y-5 &amp;&amp; posY &lt; self.y+5){
        direction += 5
    } else {
        /*
        path_end()
        self.activePath = path_add()
        if (mp_potential_path(self.activePath, fynn.x, fynn.y, 1, 40, 0)) {
            path_start(self.activePath, 1, 0, 0)
            moving = 2
        }
        */
        
        mp_potential_step(fynn.x, fynn.y, 1, 0)
        self.activePath = path_add()
        moving = 2
    }
}

if (self.debugEnemy) {
    self.debugEnemy = false
}

dir = direction - 45
if (dir &gt;0 &amp;&amp; dir &lt;= 90) sprite_index = bodygaurdTop
else if (dir &gt;0 &amp;&amp; dir &lt;= 180) sprite_index = bodygaurdLeft
else if (dir &gt;0 &amp;&amp; dir &lt;= 270) sprite_index = bodygaurdFront
else sprite_index = bodygaurdRight

if (moving &gt; 0) self.image_index = self.image_index+(moving*.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(64)
draw_set_alpha(0.5)
draw_ellipse_color(self.x-12,self.y+sprite_height/2-12,self.x+12,self.y+sprite_height/2,c_black,c_black,false)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lineColor = c_green
if (state = "search"){
    lineColor = c_yellow
} else if (state = "chase") {
    lineColor = c_red
}
//used to smooth out the drawing of the line
if (drawnDirection &gt; direction){
    if ((drawnDirection-direction) &lt; (360-drawnDirection+direction)){
        drawnDirection -= min(5,drawnDirection-direction)
    } else {
        drawnDirection += min(5,(360-drawnDirection+direction))
    }
} else if (direction &gt; drawnDirection){
 if ((direction-drawnDirection) &lt; (360+drawnDirection-direction)){
        drawnDirection += min(5,direction-drawnDirection)
    } else {
        drawnDirection -= min(5,(360+drawnDirection-direction))
    }
}
drawnDirection = drawnDirection mod 360
//drawnDirection = direction

rot = degtorad(drawnDirection + 90 - visionRad/2 + visionRot)
drawX = (self.x) + sin(rot) * vision
drawY = (self.y) + cos(rot) * vision
object = collision_line(self.x,self.y,drawX,drawY ,parentWallObj,false,true)
if (object){
    dist = distance_to_object(object)
    drawX = (self.x) + sin(rot) * dist
    drawY = (self.y) + cos(rot) * dist
}


draw_line_width_color(
 self.x + sin(rot)*18
,self.y + cos(rot)*18
,drawX
,drawY
,3
,lineColor,lineColor);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
